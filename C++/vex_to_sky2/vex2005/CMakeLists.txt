cmake_minimum_required(VERSION 3.10)
project(vex LANGUAGES C)

# Enable position independent code globally (-fPIC)
set(CMAKE_POSITION_INDEPENDENT_CODE ON)

# Find Bison and Flex for generating parser files
find_package(BISON REQUIRED)
find_package(FLEX REQUIRED)

# Configure Bison
BISON_TARGET(yacc_target
    ${CMAKE_CURRENT_SOURCE_DIR}/vex.y
    ${CMAKE_CURRENT_BINARY_DIR}/y.tab.c
    DEFINES_FILE ${CMAKE_CURRENT_BINARY_DIR}/y.tab.h
)

# Configure Flex; generate vex.yy.c from vex.yy.l
FLEX_TARGET(lex_target
    ${CMAKE_CURRENT_SOURCE_DIR}/vex.yy.l
    ${CMAKE_CURRENT_BINARY_DIR}/vex.yy.c
)


# Make the lex target dependent on the bison target.
ADD_FLEX_BISON_DEPENDENCY(lex_target yacc_target)

# Define the list of sources.
# Note: Adjust these source files as needed.
set(SOURCES
    # Your original source files (assumed to be C sources)
    ${CMAKE_CURRENT_SOURCE_DIR}/vex.y
    ${CMAKE_CURRENT_BINARY_DIR}/y.tab.c       # Generated by Bison (yacc_target)
    ${CMAKE_CURRENT_BINARY_DIR}/vex.yy.c        # Generated by Flex (lex_target)
    ${CMAKE_CURRENT_SOURCE_DIR}/vex_util.c
    ${CMAKE_CURRENT_SOURCE_DIR}/print_vex.c
    ${CMAKE_CURRENT_SOURCE_DIR}/vex_get.c
)

# Option 1: Build a static library
add_library(vex_static STATIC ${SOURCES})
set_target_properties(vex_static PROPERTIES OUTPUT_NAME "vex")

# Option 2: Build a shared library with versioning
add_library(vex SHARED ${SOURCES})
set_target_properties(vex PROPERTIES OUTPUT_NAME "vex")
# Set the shared library version and the "soname" property (adjust these numbers as needed)
set_target_properties(vex PROPERTIES VERSION 1.0.0 SOVERSION 1)
target_link_libraries(vex PUBLIC fl)
# Installation rules: install both the libraries and headers
install(TARGETS vex vex_static
    LIBRARY DESTINATION lib
    ARCHIVE DESTINATION lib
)

# Define headers. Note that y.tab.h is generated.
set(HEADERS
    ${CMAKE_CURRENT_SOURCE_DIR}/vex++.h
    ${CMAKE_CURRENT_SOURCE_DIR}/vex.h
    ${CMAKE_CURRENT_BINARY_DIR}/y.tab.h
)

install(FILES ${HEADERS}
    DESTINATION include
)

# Optional: add custom targets for cleaning generated files (CMake cleans automatically)
